{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-3!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/config/error-middleware.ts","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/config/error-middleware.ts","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import { isPromise } from 'react-jhipster';\nconst getErrorMessage = errorData => {\n    let message = errorData.message;\n    if (errorData.fieldErrors) {\n        errorData.fieldErrors.forEach(fErr => {\n            message += `\\nfield: ${fErr.field},  Object: ${fErr.objectName}, message: ${fErr.message}\\n`;\n        });\n    }\n    return message;\n};\nexport default () => next => action => {\n    // If not a promise, continue on\n    if (!isPromise(action.payload)) {\n        return next(action);\n    }\n    /**\n     *\n     * The error middleware serves to dispatch the initial pending promise to\n     * the promise middleware, but adds a `catch`.\n     * It need not run in production\n     */\n    if (process.env.NODE_ENV === 'development') {\n        // Dispatch initial pending promise, but catch any errors\n        return next(action).catch(error => {\n            console.error(`${action.type} caught at middleware with reason: ${JSON.stringify(error.message)}.`);\n            if (error && error.response && error.response.data) {\n                const message = getErrorMessage(error.response.data);\n                console.error(`Actual cause: ${message}`);\n            }\n            return Promise.reject(error);\n        });\n    }\n    return next(action);\n};\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/config/error-middleware.ts","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/config/error-middleware.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,MAAM,eAAe,GAAG,SAAS,CAAC,EAAE;IAClC,IAAI,OAAO,GAAG,SAAS,CAAC,OAAO,CAAC;IAChC,IAAI,SAAS,CAAC,WAAW,EAAE;QACzB,SAAS,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnC,OAAO,IAAI,YAAY,IAAI,CAAC,KAAK,cAAc,IAAI,CAAC,UAAU,cAAc,IAAI,CAAC,OAAO,IAAI,CAAC;QAC/F,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,eAAe,GAAG,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;IACpC,gCAAgC;IAChC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;QAC9B,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;KACrB;IAED;;;;;OAKG;IACH,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;QAC1C,yDAAyD;QACzD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;YAChC,OAAO,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,IAAI,sCAAsC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACpG,IAAI,KAAK,IAAI,KAAK,CAAC,QAAQ,IAAI,KAAK,CAAC,QAAQ,CAAC,IAAI,EAAE;gBAClD,MAAM,OAAO,GAAG,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;gBACrD,OAAO,CAAC,KAAK,CAAC,iBAAiB,OAAO,EAAE,CAAC,CAAC;aAC3C;YAED,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC,CAAC,CAAC;KACJ;IACD,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC;AACtB,CAAC,CAAC","sourcesContent":["import { isPromise } from 'react-jhipster';\n\nconst getErrorMessage = errorData => {\n  let message = errorData.message;\n  if (errorData.fieldErrors) {\n    errorData.fieldErrors.forEach(fErr => {\n      message += `\\nfield: ${fErr.field},  Object: ${fErr.objectName}, message: ${fErr.message}\\n`;\n    });\n  }\n  return message;\n};\n\nexport default () => next => action => {\n  // If not a promise, continue on\n  if (!isPromise(action.payload)) {\n    return next(action);\n  }\n\n  /**\n   *\n   * The error middleware serves to dispatch the initial pending promise to\n   * the promise middleware, but adds a `catch`.\n   * It need not run in production\n   */\n  if (process.env.NODE_ENV === 'development') {\n    // Dispatch initial pending promise, but catch any errors\n    return next(action).catch(error => {\n      console.error(`${action.type} caught at middleware with reason: ${JSON.stringify(error.message)}.`);\n      if (error && error.response && error.response.data) {\n        const message = getErrorMessage(error.response.data);\n        console.error(`Actual cause: ${message}`);\n      }\n\n      return Promise.reject(error);\n    });\n  }\n  return next(action);\n};\n"]}]}