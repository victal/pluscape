{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.tsx","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.tsx","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { Translate, translate } from 'react-jhipster';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { locales, languages } from 'app/config/translation';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\nexport class SettingsPage extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleValidSubmit = (event, values) => {\n            const account = Object.assign({}, this.props.account, values);\n            this.props.saveAccountSettings(account);\n            event.persist();\n        };\n    }\n    componentDidMount() {\n        this.props.getSession();\n    }\n    componentWillUnmount() {\n        this.props.reset();\n    }\n    render() {\n        const { account } = this.props;\n        return (React.createElement(\"div\", null,\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" },\n                    React.createElement(\"h2\", { id: \"settings-title\" },\n                        React.createElement(Translate, { contentKey: \"settings.title\", interpolate: { username: account.login } },\n                            \"User settings for \",\n                            account.login)),\n                    React.createElement(AvForm, { id: \"settings-form\", onValidSubmit: this.handleValidSubmit },\n                        React.createElement(AvField, { className: \"form-control\", name: \"firstName\", label: translate('settings.form.firstname'), id: \"firstName\", placeholder: translate('settings.form.firstname.placeholder'), validate: {\n                                required: { value: true, errorMessage: translate('settings.messages.validate.firstname.required') },\n                                minLength: { value: 1, errorMessage: translate('settings.messages.validate.firstname.minlength') },\n                                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.firstname.maxlength') }\n                            }, value: account.firstName }),\n                        React.createElement(AvField, { className: \"form-control\", name: \"lastName\", label: translate('settings.form.lastname'), id: \"lastName\", placeholder: translate('settings.form.lastname.placeholder'), validate: {\n                                required: { value: true, errorMessage: translate('settings.messages.validate.lastname.required') },\n                                minLength: { value: 1, errorMessage: translate('settings.messages.validate.lastname.minlength') },\n                                maxLength: { value: 50, errorMessage: translate('settings.messages.validate.lastname.maxlength') }\n                            }, value: account.lastName }),\n                        React.createElement(AvField, { name: \"email\", label: translate('global.form.email.label'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\n                                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                            }, value: account.email }),\n                        React.createElement(AvField, { type: \"select\", id: \"langKey\", name: \"langKey\", className: \"form-control\", label: translate('settings.form.language'), value: account.langKey }, locales.map(locale => (React.createElement(\"option\", { value: locale, key: locale }, languages[locale].name)))),\n                        React.createElement(Button, { color: \"primary\", type: \"submit\" },\n                            React.createElement(Translate, { contentKey: \"settings.form.button\" }, \"Save\")))))));\n    }\n}\nconst mapStateToProps = ({ authentication }) => ({\n    account: authentication.account,\n    isAuthenticated: authentication.isAuthenticated\n});\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.tsx","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Button, Col, Alert, Row } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { Translate, translate } from 'react-jhipster';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\n\nimport { locales, languages } from 'app/config/translation';\nimport { IRootState } from 'app/shared/reducers';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\n\nexport interface IUserSettingsProps extends StateProps, DispatchProps {}\n\nexport interface IUserSettingsState {\n  account: any;\n}\n\nexport class SettingsPage extends React.Component<IUserSettingsProps, IUserSettingsState> {\n  componentDidMount() {\n    this.props.getSession();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    const account = {\n      ...this.props.account,\n      ...values\n    };\n\n    this.props.saveAccountSettings(account);\n    event.persist();\n  };\n\n  render() {\n    const { account } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"settings-title\">\n              <Translate contentKey=\"settings.title\" interpolate={{ username: account.login }}>\n                User settings for {account.login}\n              </Translate>\n            </h2>\n            <AvForm id=\"settings-form\" onValidSubmit={this.handleValidSubmit}>\n              {/* First name */}\n              <AvField\n                className=\"form-control\"\n                name=\"firstName\"\n                label={translate('settings.form.firstname')}\n                id=\"firstName\"\n                placeholder={translate('settings.form.firstname.placeholder')}\n                validate={{\n                  required: { value: true, errorMessage: translate('settings.messages.validate.firstname.required') },\n                  minLength: { value: 1, errorMessage: translate('settings.messages.validate.firstname.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('settings.messages.validate.firstname.maxlength') }\n                }}\n                value={account.firstName}\n              />\n              {/* Last name */}\n              <AvField\n                className=\"form-control\"\n                name=\"lastName\"\n                label={translate('settings.form.lastname')}\n                id=\"lastName\"\n                placeholder={translate('settings.form.lastname.placeholder')}\n                validate={{\n                  required: { value: true, errorMessage: translate('settings.messages.validate.lastname.required') },\n                  minLength: { value: 1, errorMessage: translate('settings.messages.validate.lastname.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('settings.messages.validate.lastname.maxlength') }\n                }}\n                value={account.lastName}\n              />\n              {/* Email */}\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email.label')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                  minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                  maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                }}\n                value={account.email}\n              />\n              {/* Language key */}\n              <AvField\n                type=\"select\"\n                id=\"langKey\"\n                name=\"langKey\"\n                className=\"form-control\"\n                label={translate('settings.form.language')}\n                value={account.langKey}\n              >\n                {locales.map(locale => (\n                  <option value={locale} key={locale}>\n                    {languages[locale].name}\n                  </option>\n                ))}\n              </AvField>\n              <Button color=\"primary\" type=\"submit\">\n                <Translate contentKey=\"settings.form.button\">Save</Translate>\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, saveAccountSettings, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(SettingsPage);\n"]}]}