{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/password/password.tsx","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/password/password.tsx","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Button } from 'reactstrap';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { savePassword, reset } from './password.reducer';\nexport class PasswordPage extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            password: ''\n        };\n        this.handleValidSubmit = (event, values) => {\n            this.props.savePassword(values.currentPassword, values.newPassword);\n        };\n        this.updatePassword = event => {\n            this.setState({ password: event.target.value });\n        };\n    }\n    componentDidMount() {\n        this.props.reset();\n        this.props.getSession();\n    }\n    componentWillUnmount() {\n        this.props.reset();\n    }\n    render() {\n        const { account } = this.props;\n        return (React.createElement(\"div\", null,\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" },\n                    React.createElement(\"h2\", { id: \"password-title\" },\n                        React.createElement(Translate, { contentKey: \"password.title\", interpolate: { username: account.login } },\n                            \"Password for \",\n                            account.login)),\n                    React.createElement(AvForm, { id: \"password-form\", onValidSubmit: this.handleValidSubmit },\n                        React.createElement(AvField, { name: \"currentPassword\", label: translate('global.form.currentpassword.label'), placeholder: translate('global.form.currentpassword.placeholder'), type: \"password\", validate: {\n                                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') }\n                            } }),\n                        React.createElement(AvField, { name: \"newPassword\", label: translate('global.form.newpassword.label'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", validate: {\n                                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                                minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                                maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                            }, onChange: this.updatePassword }),\n                        React.createElement(PasswordStrengthBar, { password: this.state.password }),\n                        React.createElement(AvField, { name: \"confirmPassword\", label: translate('global.form.confirmpassword.label'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\n                                required: {\n                                    value: true,\n                                    errorMessage: translate('global.messages.validate.confirmpassword.required')\n                                },\n                                minLength: {\n                                    value: 4,\n                                    errorMessage: translate('global.messages.validate.confirmpassword.minlength')\n                                },\n                                maxLength: {\n                                    value: 50,\n                                    errorMessage: translate('global.messages.validate.confirmpassword.maxlength')\n                                },\n                                match: {\n                                    value: 'newPassword',\n                                    errorMessage: translate('global.messages.error.dontmatch')\n                                }\n                            } }),\n                        React.createElement(Button, { color: \"success\", type: \"submit\" },\n                            React.createElement(Translate, { contentKey: \"password.form.button\" }, \"Save\")))))));\n    }\n}\nconst mapStateToProps = ({ authentication }) => ({\n    account: authentication.account,\n    isAuthenticated: authentication.isAuthenticated\n});\nconst mapDispatchToProps = { getSession, savePassword, reset };\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordPage);\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/password/password.tsx","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/password/password.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Button } from 'reactstrap';\n\nimport { IRootState } from 'app/shared/reducers';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { savePassword, reset } from './password.reducer';\n\nexport interface IUserPasswordProps extends StateProps, DispatchProps {}\n\nexport interface IUserPasswordState {\n  password: string;\n}\n\nexport class PasswordPage extends React.Component<IUserPasswordProps, IUserPasswordState> {\n  state: IUserPasswordState = {\n    password: ''\n  };\n\n  componentDidMount() {\n    this.props.reset();\n    this.props.getSession();\n  }\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.savePassword(values.currentPassword, values.newPassword);\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    const { account } = this.props;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"password-title\">\n              <Translate contentKey=\"password.title\" interpolate={{ username: account.login }}>\n                Password for {account.login}\n              </Translate>\n            </h2>\n            <AvForm id=\"password-form\" onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"currentPassword\"\n                label={translate('global.form.currentpassword.label')}\n                placeholder={translate('global.form.currentpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') }\n                }}\n              />\n              <AvField\n                name=\"newPassword\"\n                label={translate('global.form.newpassword.label')}\n                placeholder={translate('global.form.newpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                  minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                }}\n                onChange={this.updatePassword}\n              />\n              <PasswordStrengthBar password={this.state.password} />\n              <AvField\n                name=\"confirmPassword\"\n                label={translate('global.form.confirmpassword.label')}\n                placeholder={translate('global.form.confirmpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: {\n                    value: true,\n                    errorMessage: translate('global.messages.validate.confirmpassword.required')\n                  },\n                  minLength: {\n                    value: 4,\n                    errorMessage: translate('global.messages.validate.confirmpassword.minlength')\n                  },\n                  maxLength: {\n                    value: 50,\n                    errorMessage: translate('global.messages.validate.confirmpassword.maxlength')\n                  },\n                  match: {\n                    value: 'newPassword',\n                    errorMessage: translate('global.messages.error.dontmatch')\n                  }\n                }}\n              />\n              <Button color=\"success\" type=\"submit\">\n                <Translate contentKey=\"password.form.button\">Save</Translate>\n              </Button>\n            </AvForm>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ authentication }: IRootState) => ({\n  account: authentication.account,\n  isAuthenticated: authentication.isAuthenticated\n});\n\nconst mapDispatchToProps = { getSession, savePassword, reset };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PasswordPage);\n"]}]}