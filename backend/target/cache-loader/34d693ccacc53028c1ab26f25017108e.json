{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-3!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/administration.reducer.ts","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/administration.reducer.ts","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nexport const ACTION_TYPES = {\n    FETCH_LOGS: 'administration/FETCH_LOGS',\n    FETCH_LOGS_CHANGE_LEVEL: 'administration/FETCH_LOGS_CHANGE_LEVEL',\n    FETCH_HEALTH: 'administration/FETCH_HEALTH',\n    FETCH_METRICS: 'administration/FETCH_METRICS',\n    FETCH_THREAD_DUMP: 'administration/FETCH_THREAD_DUMP',\n    FETCH_CONFIGURATIONS: 'administration/FETCH_CONFIGURATIONS',\n    FETCH_ENV: 'administration/FETCH_ENV',\n    FETCH_AUDITS: 'administration/FETCH_AUDITS'\n};\nconst initialState = {\n    loading: false,\n    errorMessage: null,\n    logs: {\n        loggers: []\n    },\n    health: {},\n    metrics: {},\n    threadDump: [],\n    configuration: {\n        configProps: {},\n        env: {}\n    },\n    audits: [],\n    totalItems: 0\n};\n// Reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case REQUEST(ACTION_TYPES.FETCH_METRICS):\n        case REQUEST(ACTION_TYPES.FETCH_THREAD_DUMP):\n        case REQUEST(ACTION_TYPES.FETCH_LOGS):\n        case REQUEST(ACTION_TYPES.FETCH_CONFIGURATIONS):\n        case REQUEST(ACTION_TYPES.FETCH_ENV):\n        case REQUEST(ACTION_TYPES.FETCH_AUDITS):\n        case REQUEST(ACTION_TYPES.FETCH_HEALTH):\n            return Object.assign({}, state, { errorMessage: null, loading: true });\n        case FAILURE(ACTION_TYPES.FETCH_METRICS):\n        case FAILURE(ACTION_TYPES.FETCH_THREAD_DUMP):\n        case FAILURE(ACTION_TYPES.FETCH_LOGS):\n        case FAILURE(ACTION_TYPES.FETCH_CONFIGURATIONS):\n        case FAILURE(ACTION_TYPES.FETCH_ENV):\n        case FAILURE(ACTION_TYPES.FETCH_AUDITS):\n        case FAILURE(ACTION_TYPES.FETCH_HEALTH):\n            return Object.assign({}, state, { loading: false, errorMessage: action.payload });\n        case SUCCESS(ACTION_TYPES.FETCH_METRICS):\n            return Object.assign({}, state, { loading: false, metrics: action.payload.data });\n        case SUCCESS(ACTION_TYPES.FETCH_THREAD_DUMP):\n            return Object.assign({}, state, { loading: false, threadDump: action.payload.data });\n        case SUCCESS(ACTION_TYPES.FETCH_LOGS):\n            return Object.assign({}, state, { loading: false, logs: {\n                    loggers: action.payload.data.loggers\n                } });\n        case SUCCESS(ACTION_TYPES.FETCH_CONFIGURATIONS):\n            return Object.assign({}, state, { loading: false, configuration: Object.assign({}, state.configuration, { configProps: action.payload.data }) });\n        case SUCCESS(ACTION_TYPES.FETCH_ENV):\n            return Object.assign({}, state, { loading: false, configuration: Object.assign({}, state.configuration, { env: action.payload.data }) });\n        case SUCCESS(ACTION_TYPES.FETCH_AUDITS):\n            return Object.assign({}, state, { loading: false, audits: action.payload.data, totalItems: parseInt(action.payload.headers['x-total-count'], 10) });\n        case SUCCESS(ACTION_TYPES.FETCH_HEALTH):\n            return Object.assign({}, state, { loading: false, health: action.payload.data });\n        default:\n            return state;\n    }\n};\n// Actions\nexport const systemHealth = () => ({\n    type: ACTION_TYPES.FETCH_HEALTH,\n    payload: axios.get('management/health')\n});\nexport const systemMetrics = () => ({\n    type: ACTION_TYPES.FETCH_METRICS,\n    payload: axios.get('management/jhimetrics')\n});\nexport const systemThreadDump = () => ({\n    type: ACTION_TYPES.FETCH_THREAD_DUMP,\n    payload: axios.get('management/threaddump')\n});\nexport const getLoggers = () => ({\n    type: ACTION_TYPES.FETCH_LOGS,\n    payload: axios.get('management/loggers')\n});\nexport const changeLogLevel = (name, configuredLevel) => {\n    const body = { configuredLevel };\n    return (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n        yield dispatch({\n            type: ACTION_TYPES.FETCH_LOGS_CHANGE_LEVEL,\n            payload: axios.post('management/loggers/' + name, body)\n        });\n        dispatch(getLoggers());\n    });\n};\nexport const getConfigurations = () => ({\n    type: ACTION_TYPES.FETCH_CONFIGURATIONS,\n    payload: axios.get('management/configprops')\n});\nexport const getEnv = () => ({\n    type: ACTION_TYPES.FETCH_ENV,\n    payload: axios.get('management/env')\n});\nexport const getAudits = (page, size, sort, fromDate, toDate) => {\n    let requestUrl = `management/audits${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\n    if (fromDate) {\n        requestUrl += `&fromDate=${fromDate}`;\n    }\n    if (toDate) {\n        requestUrl += `&toDate=${toDate}`;\n    }\n    return {\n        type: ACTION_TYPES.FETCH_AUDITS,\n        payload: axios.get(requestUrl)\n    };\n};\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/administration.reducer.ts","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/administration.reducer.ts"],"names":[],"mappings":"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","sourcesContent":["import axios from 'axios';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\n\nexport const ACTION_TYPES = {\n  FETCH_LOGS: 'administration/FETCH_LOGS',\n  FETCH_LOGS_CHANGE_LEVEL: 'administration/FETCH_LOGS_CHANGE_LEVEL',\n  FETCH_HEALTH: 'administration/FETCH_HEALTH',\n  FETCH_METRICS: 'administration/FETCH_METRICS',\n  FETCH_THREAD_DUMP: 'administration/FETCH_THREAD_DUMP',\n  FETCH_CONFIGURATIONS: 'administration/FETCH_CONFIGURATIONS',\n  FETCH_ENV: 'administration/FETCH_ENV',\n  FETCH_AUDITS: 'administration/FETCH_AUDITS'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  logs: {\n    loggers: [] as any[]\n  },\n  health: {} as any,\n  metrics: {} as any,\n  threadDump: [],\n  configuration: {\n    configProps: {} as any,\n    env: {} as any\n  },\n  audits: [],\n  totalItems: 0\n};\n\nexport type AdministrationState = Readonly<typeof initialState>;\n\n// Reducer\n\nexport default (state: AdministrationState = initialState, action): AdministrationState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.FETCH_METRICS):\n    case REQUEST(ACTION_TYPES.FETCH_THREAD_DUMP):\n    case REQUEST(ACTION_TYPES.FETCH_LOGS):\n    case REQUEST(ACTION_TYPES.FETCH_CONFIGURATIONS):\n    case REQUEST(ACTION_TYPES.FETCH_ENV):\n    case REQUEST(ACTION_TYPES.FETCH_AUDITS):\n    case REQUEST(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        errorMessage: null,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.FETCH_METRICS):\n    case FAILURE(ACTION_TYPES.FETCH_THREAD_DUMP):\n    case FAILURE(ACTION_TYPES.FETCH_LOGS):\n    case FAILURE(ACTION_TYPES.FETCH_CONFIGURATIONS):\n    case FAILURE(ACTION_TYPES.FETCH_ENV):\n    case FAILURE(ACTION_TYPES.FETCH_AUDITS):\n    case FAILURE(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        loading: false,\n        errorMessage: action.payload\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_METRICS):\n      return {\n        ...state,\n        loading: false,\n        metrics: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_THREAD_DUMP):\n      return {\n        ...state,\n        loading: false,\n        threadDump: action.payload.data\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_LOGS):\n      return {\n        ...state,\n        loading: false,\n        logs: {\n          loggers: action.payload.data.loggers\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_CONFIGURATIONS):\n      return {\n        ...state,\n        loading: false,\n        configuration: {\n          ...state.configuration,\n          configProps: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_ENV):\n      return {\n        ...state,\n        loading: false,\n        configuration: {\n          ...state.configuration,\n          env: action.payload.data\n        }\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_AUDITS):\n      return {\n        ...state,\n        loading: false,\n        audits: action.payload.data,\n        totalItems: parseInt(action.payload.headers['x-total-count'], 10)\n      };\n    case SUCCESS(ACTION_TYPES.FETCH_HEALTH):\n      return {\n        ...state,\n        loading: false,\n        health: action.payload.data\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\n\nexport const systemHealth = () => ({\n  type: ACTION_TYPES.FETCH_HEALTH,\n  payload: axios.get('management/health')\n});\n\nexport const systemMetrics = () => ({\n  type: ACTION_TYPES.FETCH_METRICS,\n  payload: axios.get('management/jhimetrics')\n});\n\nexport const systemThreadDump = () => ({\n  type: ACTION_TYPES.FETCH_THREAD_DUMP,\n  payload: axios.get('management/threaddump')\n});\n\nexport const getLoggers = () => ({\n  type: ACTION_TYPES.FETCH_LOGS,\n  payload: axios.get('management/loggers')\n});\n\nexport const changeLogLevel = (name, configuredLevel) => {\n  const body = { configuredLevel };\n  return async dispatch => {\n    await dispatch({\n      type: ACTION_TYPES.FETCH_LOGS_CHANGE_LEVEL,\n      payload: axios.post('management/loggers/' + name, body)\n    });\n    dispatch(getLoggers());\n  };\n};\n\nexport const getConfigurations = () => ({\n  type: ACTION_TYPES.FETCH_CONFIGURATIONS,\n  payload: axios.get('management/configprops')\n});\n\nexport const getEnv = () => ({\n  type: ACTION_TYPES.FETCH_ENV,\n  payload: axios.get('management/env')\n});\n\nexport const getAudits = (page, size, sort, fromDate, toDate) => {\n  let requestUrl = `management/audits${sort ? `?page=${page}&size=${size}&sort=${sort}` : ''}`;\n  if (fromDate) {\n    requestUrl += `&fromDate=${fromDate}`;\n  }\n  if (toDate) {\n    requestUrl += `&toDate=${toDate}`;\n  }\n  return {\n    type: ACTION_TYPES.FETCH_AUDITS,\n    payload: axios.get(requestUrl)\n  };\n};\n"]}]}