{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-3!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/entities/product/product-update.tsx","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/entities/product/product-update.tsx","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, setFileData, openFile, byteSize } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { getEntities as getSizes } from 'app/entities/size/size.reducer';\nimport { getEntities as getCategories } from 'app/entities/category/category.reducer';\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './product.reducer';\nimport { mapIdList } from 'app/shared/util/entity-utils';\nexport class ProductUpdate extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onBlobChange = (isAnImage, name) => event => {\n            setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType), isAnImage);\n        };\n        this.clearBlob = name => () => {\n            this.props.setBlob(name, undefined, undefined);\n        };\n        this.saveEntity = (event, errors, values) => {\n            if (errors.length === 0) {\n                const { productEntity } = this.props;\n                const entity = Object.assign({}, productEntity, values, { sizes: mapIdList(values.sizes), categories: mapIdList(values.categories) });\n                if (this.state.isNew) {\n                    this.props.createEntity(entity);\n                }\n                else {\n                    this.props.updateEntity(entity);\n                }\n            }\n        };\n        this.handleClose = () => {\n            this.props.history.push('/entity/product');\n        };\n        this.state = {\n            idssizes: [],\n            idscategories: [],\n            isNew: !this.props.match.params || !this.props.match.params.id\n        };\n    }\n    componentWillUpdate(nextProps, nextState) {\n        if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n            this.handleClose();\n        }\n    }\n    componentDidMount() {\n        if (!this.state.isNew) {\n            this.props.getEntity(this.props.match.params.id);\n        }\n        this.props.getSizes();\n        this.props.getCategories();\n    }\n    render() {\n        const { productEntity, sizes, categories, loading, updating } = this.props;\n        const { isNew } = this.state;\n        const { picture, pictureContentType } = productEntity;\n        return (React.createElement(\"div\", null,\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" },\n                    React.createElement(\"h2\", { id: \"pluscapeApp.product.home.createOrEditLabel\" },\n                        React.createElement(Translate, { contentKey: \"pluscapeApp.product.home.createOrEditLabel\" }, \"Create or edit a Product\")))),\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" }, loading ? (React.createElement(\"p\", null, \"Loading...\")) : (React.createElement(AvForm, { model: isNew ? {} : productEntity, onSubmit: this.saveEntity },\n                    !isNew ? (React.createElement(AvGroup, null,\n                        React.createElement(Label, { for: \"product-id\" },\n                            React.createElement(Translate, { contentKey: \"global.field.id\" }, \"ID\")),\n                        React.createElement(AvInput, { id: \"product-id\", type: \"text\", className: \"form-control\", name: \"id\", required: true, readOnly: true }))) : null,\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"nameLabel\", for: \"product-name\" },\n                            React.createElement(Translate, { contentKey: \"pluscapeApp.product.name\" }, \"Name\")),\n                        React.createElement(AvField, { id: \"product-name\", type: \"text\", name: \"name\", validate: {\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\n                            } })),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"descriptionLabel\", for: \"product-description\" },\n                            React.createElement(Translate, { contentKey: \"pluscapeApp.product.description\" }, \"Description\")),\n                        React.createElement(AvField, { id: \"product-description\", type: \"text\", name: \"description\", validate: {\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\n                            } })),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"currentPriceLabel\", for: \"product-currentPrice\" },\n                            React.createElement(Translate, { contentKey: \"pluscapeApp.product.currentPrice\" }, \"Current Price\")),\n                        React.createElement(AvField, { id: \"product-currentPrice\", type: \"text\", name: \"currentPrice\", validate: {\n                                required: { value: true, errorMessage: translate('entity.validation.required') },\n                                number: { value: true, errorMessage: translate('entity.validation.number') }\n                            } })),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"standardPriceLabel\", for: \"product-standardPrice\" },\n                            React.createElement(Translate, { contentKey: \"pluscapeApp.product.standardPrice\" }, \"Standard Price\")),\n                        React.createElement(AvField, { id: \"product-standardPrice\", type: \"text\", name: \"standardPrice\", validate: {\n                                required: { value: true, errorMessage: translate('entity.validation.required') },\n                                number: { value: true, errorMessage: translate('entity.validation.number') }\n                            } })),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { id: \"linkLabel\", for: \"product-link\" },\n                            React.createElement(Translate, { contentKey: \"pluscapeApp.product.link\" }, \"Link\")),\n                        React.createElement(AvField, { id: \"product-link\", type: \"text\", name: \"link\", validate: {\n                                required: { value: true, errorMessage: translate('entity.validation.required') }\n                            } })),\n                    React.createElement(AvGroup, null,\n                        React.createElement(AvGroup, null,\n                            React.createElement(Label, { id: \"pictureLabel\", for: \"picture\" },\n                                React.createElement(Translate, { contentKey: \"pluscapeApp.product.picture\" }, \"Picture\")),\n                            React.createElement(\"br\", null),\n                            picture ? (React.createElement(\"div\", null,\n                                React.createElement(\"a\", { onClick: openFile(pictureContentType, picture) },\n                                    React.createElement(\"img\", { src: `data:${pictureContentType};base64,${picture}`, style: { maxHeight: '100px' } })),\n                                React.createElement(\"br\", null),\n                                React.createElement(Row, null,\n                                    React.createElement(Col, { md: \"11\" },\n                                        React.createElement(\"span\", null,\n                                            pictureContentType,\n                                            \", \",\n                                            byteSize(picture))),\n                                    React.createElement(Col, { md: \"1\" },\n                                        React.createElement(Button, { color: \"danger\", onClick: this.clearBlob('picture') },\n                                            React.createElement(FontAwesomeIcon, { icon: \"times-circle\" })))))) : null,\n                            React.createElement(\"input\", { id: \"file_picture\", type: \"file\", onChange: this.onBlobChange(true, 'picture'), accept: \"image/*\" }),\n                            React.createElement(AvInput, { type: \"hidden\", name: \"picture\", value: picture, validate: {\n                                    required: { value: true, errorMessage: translate('entity.validation.required') }\n                                } }))),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { for: \"product-sizes\" },\n                            React.createElement(Translate, { contentKey: \"pluscapeApp.product.sizes\" }, \"Sizes\")),\n                        React.createElement(AvInput, { id: \"product-sizes\", type: \"select\", multiple: true, className: \"form-control\", name: \"sizes\", value: productEntity.sizes && productEntity.sizes.map(e => e.id) },\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\n                            sizes\n                                ? sizes.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.description)))\n                                : null)),\n                    React.createElement(AvGroup, null,\n                        React.createElement(Label, { for: \"product-categories\" },\n                            React.createElement(Translate, { contentKey: \"pluscapeApp.product.categories\" }, \"Categories\")),\n                        React.createElement(AvInput, { id: \"product-categories\", type: \"select\", multiple: true, className: \"form-control\", name: \"categories\", value: productEntity.categories && productEntity.categories.map(e => e.id) },\n                            React.createElement(\"option\", { value: \"\", key: \"0\" }),\n                            categories\n                                ? categories.map(otherEntity => (React.createElement(\"option\", { value: otherEntity.id, key: otherEntity.id }, otherEntity.name)))\n                                : null)),\n                    React.createElement(Button, { tag: Link, id: \"cancel-save\", to: \"/entity/product\", replace: true, color: \"info\" },\n                        React.createElement(FontAwesomeIcon, { icon: \"arrow-left\" }),\n                        \"\\u00A0\",\n                        React.createElement(\"span\", { className: \"d-none d-md-inline\" },\n                            React.createElement(Translate, { contentKey: \"entity.action.back\" }, \"Back\"))),\n                    \"\\u00A0\",\n                    React.createElement(Button, { color: \"primary\", id: \"save-entity\", type: \"submit\", disabled: updating },\n                        React.createElement(FontAwesomeIcon, { icon: \"save\" }),\n                        \"\\u00A0\",\n                        React.createElement(Translate, { contentKey: \"entity.action.save\" }, \"Save\"))))))));\n    }\n}\nconst mapStateToProps = (storeState) => ({\n    sizes: storeState.size.entities,\n    categories: storeState.category.entities,\n    productEntity: storeState.product.entity,\n    loading: storeState.product.loading,\n    updating: storeState.product.updating,\n    updateSuccess: storeState.product.updateSuccess\n});\nconst mapDispatchToProps = {\n    getSizes,\n    getCategories,\n    getEntity,\n    updateEntity,\n    setBlob,\n    createEntity,\n    reset\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductUpdate);\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/entities/product/product-update.tsx","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/entities/product/product-update.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, RouteComponentProps } from 'react-router-dom';\nimport { Button, Row, Col, Label } from 'reactstrap';\nimport { AvFeedback, AvForm, AvGroup, AvInput, AvField } from 'availity-reactstrap-validation';\n// tslint:disable-next-line:no-unused-variable\nimport { Translate, translate, ICrudGetAction, ICrudGetAllAction, setFileData, openFile, byteSize, ICrudPutAction } from 'react-jhipster';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { IRootState } from 'app/shared/reducers';\n\nimport { ISize } from 'app/shared/model/size.model';\nimport { getEntities as getSizes } from 'app/entities/size/size.reducer';\nimport { ICategory } from 'app/shared/model/category.model';\nimport { getEntities as getCategories } from 'app/entities/category/category.reducer';\nimport { getEntity, updateEntity, createEntity, setBlob, reset } from './product.reducer';\nimport { IProduct } from 'app/shared/model/product.model';\n// tslint:disable-next-line:no-unused-variable\nimport { convertDateTimeFromServer, convertDateTimeToServer } from 'app/shared/util/date-utils';\nimport { mapIdList } from 'app/shared/util/entity-utils';\n\nexport interface IProductUpdateProps extends StateProps, DispatchProps, RouteComponentProps<{ id: string }> {}\n\nexport interface IProductUpdateState {\n  isNew: boolean;\n  idssizes: any[];\n  idscategories: any[];\n}\n\nexport class ProductUpdate extends React.Component<IProductUpdateProps, IProductUpdateState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      idssizes: [],\n      idscategories: [],\n      isNew: !this.props.match.params || !this.props.match.params.id\n    };\n  }\n\n  componentWillUpdate(nextProps, nextState) {\n    if (nextProps.updateSuccess !== this.props.updateSuccess && nextProps.updateSuccess) {\n      this.handleClose();\n    }\n  }\n\n  componentDidMount() {\n    if (!this.state.isNew) {\n      this.props.getEntity(this.props.match.params.id);\n    }\n\n    this.props.getSizes();\n    this.props.getCategories();\n  }\n\n  onBlobChange = (isAnImage, name) => event => {\n    setFileData(event, (contentType, data) => this.props.setBlob(name, data, contentType), isAnImage);\n  };\n\n  clearBlob = name => () => {\n    this.props.setBlob(name, undefined, undefined);\n  };\n\n  saveEntity = (event, errors, values) => {\n    if (errors.length === 0) {\n      const { productEntity } = this.props;\n      const entity = {\n        ...productEntity,\n        ...values,\n        sizes: mapIdList(values.sizes),\n        categories: mapIdList(values.categories)\n      };\n\n      if (this.state.isNew) {\n        this.props.createEntity(entity);\n      } else {\n        this.props.updateEntity(entity);\n      }\n    }\n  };\n\n  handleClose = () => {\n    this.props.history.push('/entity/product');\n  };\n\n  render() {\n    const { productEntity, sizes, categories, loading, updating } = this.props;\n    const { isNew } = this.state;\n\n    const { picture, pictureContentType } = productEntity;\n\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h2 id=\"pluscapeApp.product.home.createOrEditLabel\">\n              <Translate contentKey=\"pluscapeApp.product.home.createOrEditLabel\">Create or edit a Product</Translate>\n            </h2>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            {loading ? (\n              <p>Loading...</p>\n            ) : (\n              <AvForm model={isNew ? {} : productEntity} onSubmit={this.saveEntity}>\n                {!isNew ? (\n                  <AvGroup>\n                    <Label for=\"product-id\">\n                      <Translate contentKey=\"global.field.id\">ID</Translate>\n                    </Label>\n                    <AvInput id=\"product-id\" type=\"text\" className=\"form-control\" name=\"id\" required readOnly />\n                  </AvGroup>\n                ) : null}\n                <AvGroup>\n                  <Label id=\"nameLabel\" for=\"product-name\">\n                    <Translate contentKey=\"pluscapeApp.product.name\">Name</Translate>\n                  </Label>\n                  <AvField\n                    id=\"product-name\"\n                    type=\"text\"\n                    name=\"name\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"descriptionLabel\" for=\"product-description\">\n                    <Translate contentKey=\"pluscapeApp.product.description\">Description</Translate>\n                  </Label>\n                  <AvField\n                    id=\"product-description\"\n                    type=\"text\"\n                    name=\"description\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"currentPriceLabel\" for=\"product-currentPrice\">\n                    <Translate contentKey=\"pluscapeApp.product.currentPrice\">Current Price</Translate>\n                  </Label>\n                  <AvField\n                    id=\"product-currentPrice\"\n                    type=\"text\"\n                    name=\"currentPrice\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') },\n                      number: { value: true, errorMessage: translate('entity.validation.number') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"standardPriceLabel\" for=\"product-standardPrice\">\n                    <Translate contentKey=\"pluscapeApp.product.standardPrice\">Standard Price</Translate>\n                  </Label>\n                  <AvField\n                    id=\"product-standardPrice\"\n                    type=\"text\"\n                    name=\"standardPrice\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') },\n                      number: { value: true, errorMessage: translate('entity.validation.number') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <Label id=\"linkLabel\" for=\"product-link\">\n                    <Translate contentKey=\"pluscapeApp.product.link\">Link</Translate>\n                  </Label>\n                  <AvField\n                    id=\"product-link\"\n                    type=\"text\"\n                    name=\"link\"\n                    validate={{\n                      required: { value: true, errorMessage: translate('entity.validation.required') }\n                    }}\n                  />\n                </AvGroup>\n                <AvGroup>\n                  <AvGroup>\n                    <Label id=\"pictureLabel\" for=\"picture\">\n                      <Translate contentKey=\"pluscapeApp.product.picture\">Picture</Translate>\n                    </Label>\n                    <br />\n                    {picture ? (\n                      <div>\n                        <a onClick={openFile(pictureContentType, picture)}>\n                          <img src={`data:${pictureContentType};base64,${picture}`} style={{ maxHeight: '100px' }} />\n                        </a>\n                        <br />\n                        <Row>\n                          <Col md=\"11\">\n                            <span>\n                              {pictureContentType}, {byteSize(picture)}\n                            </span>\n                          </Col>\n                          <Col md=\"1\">\n                            <Button color=\"danger\" onClick={this.clearBlob('picture')}>\n                              <FontAwesomeIcon icon=\"times-circle\" />\n                            </Button>\n                          </Col>\n                        </Row>\n                      </div>\n                    ) : null}\n                    <input id=\"file_picture\" type=\"file\" onChange={this.onBlobChange(true, 'picture')} accept=\"image/*\" />\n                    <AvInput\n                      type=\"hidden\"\n                      name=\"picture\"\n                      value={picture}\n                      validate={{\n                        required: { value: true, errorMessage: translate('entity.validation.required') }\n                      }}\n                    />\n                  </AvGroup>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"product-sizes\">\n                    <Translate contentKey=\"pluscapeApp.product.sizes\">Sizes</Translate>\n                  </Label>\n                  <AvInput\n                    id=\"product-sizes\"\n                    type=\"select\"\n                    multiple\n                    className=\"form-control\"\n                    name=\"sizes\"\n                    value={productEntity.sizes && productEntity.sizes.map(e => e.id)}\n                  >\n                    <option value=\"\" key=\"0\" />\n                    {sizes\n                      ? sizes.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.description}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <AvGroup>\n                  <Label for=\"product-categories\">\n                    <Translate contentKey=\"pluscapeApp.product.categories\">Categories</Translate>\n                  </Label>\n                  <AvInput\n                    id=\"product-categories\"\n                    type=\"select\"\n                    multiple\n                    className=\"form-control\"\n                    name=\"categories\"\n                    value={productEntity.categories && productEntity.categories.map(e => e.id)}\n                  >\n                    <option value=\"\" key=\"0\" />\n                    {categories\n                      ? categories.map(otherEntity => (\n                          <option value={otherEntity.id} key={otherEntity.id}>\n                            {otherEntity.name}\n                          </option>\n                        ))\n                      : null}\n                  </AvInput>\n                </AvGroup>\n                <Button tag={Link} id=\"cancel-save\" to=\"/entity/product\" replace color=\"info\">\n                  <FontAwesomeIcon icon=\"arrow-left\" />\n                  &nbsp;\n                  <span className=\"d-none d-md-inline\">\n                    <Translate contentKey=\"entity.action.back\">Back</Translate>\n                  </span>\n                </Button>\n                &nbsp;\n                <Button color=\"primary\" id=\"save-entity\" type=\"submit\" disabled={updating}>\n                  <FontAwesomeIcon icon=\"save\" />\n                  &nbsp;\n                  <Translate contentKey=\"entity.action.save\">Save</Translate>\n                </Button>\n              </AvForm>\n            )}\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (storeState: IRootState) => ({\n  sizes: storeState.size.entities,\n  categories: storeState.category.entities,\n  productEntity: storeState.product.entity,\n  loading: storeState.product.loading,\n  updating: storeState.product.updating,\n  updateSuccess: storeState.product.updateSuccess\n});\n\nconst mapDispatchToProps = {\n  getSizes,\n  getCategories,\n  getEntity,\n  updateEntity,\n  setBlob,\n  createEntity,\n  reset\n};\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ProductUpdate);\n"]}]}