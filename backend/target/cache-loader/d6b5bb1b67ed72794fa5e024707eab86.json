{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-3!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.reducer.ts","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.reducer.ts","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nimport { translate, Storage } from 'react-jhipster';\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { getSession } from 'app/shared/reducers/authentication';\nexport const ACTION_TYPES = {\n    UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\n    RESET: 'account/RESET'\n};\nconst initialState = {\n    loading: false,\n    errorMessage: null,\n    updateSuccess: false,\n    updateFailure: false\n};\n// Reducer\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\n            return Object.assign({}, state, { errorMessage: null, updateSuccess: false, loading: true });\n        case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\n            return Object.assign({}, state, { loading: false, updateSuccess: false, updateFailure: true });\n        case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\n            return Object.assign({}, state, { loading: false, updateSuccess: true, updateFailure: false });\n        case ACTION_TYPES.RESET:\n            return Object.assign({}, initialState);\n        default:\n            return state;\n    }\n};\n// Actions\nconst apiUrl = 'api/account';\nexport const saveAccountSettings = account => (dispatch, getState) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n    yield dispatch({\n        type: ACTION_TYPES.UPDATE_ACCOUNT,\n        payload: axios.post(apiUrl, account),\n        meta: {\n            successMessage: translate('settings.messages.success')\n        }\n    });\n    if (Storage.session.get(`locale`)) {\n        Storage.session.remove(`locale`);\n    }\n    yield dispatch(getSession());\n});\nexport const reset = () => ({\n    type: ACTION_TYPES.RESET\n});\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.reducer.ts","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/settings/settings.reducer.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AAEpD,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AACjF,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAEhE,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,cAAc,EAAE,wBAAwB;IACxC,KAAK,EAAE,eAAe;CACvB,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,OAAO,EAAE,KAAK;IACd,YAAY,EAAE,IAAI;IAClB,aAAa,EAAE,KAAK;IACpB,aAAa,EAAE,KAAK;CACrB,CAAC;AAIF,UAAU;AACV,eAAe,CAAC,QAAuB,YAAY,EAAE,MAAM,EAAiB,EAAE;IAC5E,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,yBACK,KAAK,IACR,YAAY,EAAE,IAAI,EAClB,aAAa,EAAE,KAAK,EACpB,OAAO,EAAE,IAAI,IACb;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,aAAa,EAAE,KAAK,EACpB,aAAa,EAAE,IAAI,IACnB;QACJ,KAAK,OAAO,CAAC,YAAY,CAAC,cAAc,CAAC;YACvC,yBACK,KAAK,IACR,OAAO,EAAE,KAAK,EACd,aAAa,EAAE,IAAI,EACnB,aAAa,EAAE,KAAK,IACpB;QACJ,KAAK,YAAY,CAAC,KAAK;YACrB,yBACK,YAAY,EACf;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,UAAU;AACV,MAAM,MAAM,GAAG,aAAa,CAAC;AAE7B,MAAM,CAAC,MAAM,mBAAmB,GAAG,OAAO,CAAC,EAAE,CAAC,CAAO,QAAQ,EAAE,QAAQ,EAAE,EAAE;IACzE,MAAM,QAAQ,CAAC;QACb,IAAI,EAAE,YAAY,CAAC,cAAc;QACjC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC;QACpC,IAAI,EAAE;YACJ,cAAc,EAAE,SAAS,CAAC,2BAA2B,CAAC;SACvD;KACF,CAAC,CAAC;IAEH,IAAI,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE;QACjC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;KAClC;IAED,MAAM,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;AAC/B,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,CAAC;IAC1B,IAAI,EAAE,YAAY,CAAC,KAAK;CACzB,CAAC,CAAC","sourcesContent":["import axios from 'axios';\nimport { translate, Storage } from 'react-jhipster';\n\nimport { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';\nimport { getSession } from 'app/shared/reducers/authentication';\n\nexport const ACTION_TYPES = {\n  UPDATE_ACCOUNT: 'account/UPDATE_ACCOUNT',\n  RESET: 'account/RESET'\n};\n\nconst initialState = {\n  loading: false,\n  errorMessage: null,\n  updateSuccess: false,\n  updateFailure: false\n};\n\nexport type SettingsState = Readonly<typeof initialState>;\n\n// Reducer\nexport default (state: SettingsState = initialState, action): SettingsState => {\n  switch (action.type) {\n    case REQUEST(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        errorMessage: null,\n        updateSuccess: false,\n        loading: true\n      };\n    case FAILURE(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: false,\n        updateFailure: true\n      };\n    case SUCCESS(ACTION_TYPES.UPDATE_ACCOUNT):\n      return {\n        ...state,\n        loading: false,\n        updateSuccess: true,\n        updateFailure: false\n      };\n    case ACTION_TYPES.RESET:\n      return {\n        ...initialState\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nconst apiUrl = 'api/account';\n\nexport const saveAccountSettings = account => async (dispatch, getState) => {\n  await dispatch({\n    type: ACTION_TYPES.UPDATE_ACCOUNT,\n    payload: axios.post(apiUrl, account),\n    meta: {\n      successMessage: translate('settings.messages.success')\n    }\n  });\n\n  if (Storage.session.get(`locale`)) {\n    Storage.session.remove(`locale`);\n  }\n\n  await dispatch(getSession());\n};\n\nexport const reset = () => ({\n  type: ACTION_TYPES.RESET\n});\n"]}]}