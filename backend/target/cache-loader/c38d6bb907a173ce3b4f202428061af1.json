{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/register/register.tsx","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/register/register.tsx","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { handleRegister, reset } from './register.reducer';\nexport class RegisterPage extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            password: ''\n        };\n        this.handleValidSubmit = (event, values) => {\n            this.props.handleRegister(values.username, values.email, values.firstPassword, this.props.currentLocale);\n            event.preventDefault();\n        };\n        this.updatePassword = event => {\n            this.setState({ password: event.target.value });\n        };\n    }\n    componentWillUnmount() {\n        this.props.reset();\n    }\n    render() {\n        return (React.createElement(\"div\", null,\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" },\n                    React.createElement(\"h1\", { id: \"register-title\" },\n                        React.createElement(Translate, { contentKey: \"register.title\" }, \"Registration\")))),\n            React.createElement(Row, { className: \"justify-content-center\" },\n                React.createElement(Col, { md: \"8\" },\n                    React.createElement(AvForm, { id: \"register-form\", onValidSubmit: this.handleValidSubmit },\n                        React.createElement(AvField, { name: \"username\", label: translate('global.form.username.label'), placeholder: translate('global.form.username.placeholder'), validate: {\n                                required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\n                                pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\n                                minLength: { value: 1, errorMessage: translate('register.messages.validate.login.minlength') },\n                                maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\n                            } }),\n                        React.createElement(AvField, { name: \"email\", label: translate('global.form.email.label'), placeholder: translate('global.form.email.placeholder'), type: \"email\", validate: {\n                                required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                                minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                                maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                            } }),\n                        React.createElement(AvField, { name: \"firstPassword\", label: translate('global.form.newpassword.label'), placeholder: translate('global.form.newpassword.placeholder'), type: \"password\", onChange: this.updatePassword, validate: {\n                                required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                                minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                                maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                            } }),\n                        React.createElement(PasswordStrengthBar, { password: this.state.password }),\n                        React.createElement(AvField, { name: \"secondPassword\", label: translate('global.form.confirmpassword.label'), placeholder: translate('global.form.confirmpassword.placeholder'), type: \"password\", validate: {\n                                required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n                                minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n                                maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n                                match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\n                            } }),\n                        React.createElement(Button, { id: \"register-submit\", color: \"primary\", type: \"submit\" },\n                            React.createElement(Translate, { contentKey: \"register.form.button\" }, \"Register\"))),\n                    React.createElement(\"p\", null, \"\\u00A0\"),\n                    React.createElement(Alert, { color: \"warning\" },\n                        React.createElement(\"span\", null,\n                            React.createElement(Translate, { contentKey: \"global.messages.info.authenticated.prefix\" }, \"If you want to \")),\n                        React.createElement(\"a\", { className: \"alert-link\" },\n                            React.createElement(Translate, { contentKey: \"global.messages.info.authenticated.link\" }, \" sign in\")),\n                        React.createElement(\"span\", null,\n                            React.createElement(Translate, { contentKey: \"global.messages.info.authenticated.suffix\" },\n                                \", you can try the default accounts:\",\n                                React.createElement(\"br\", null),\n                                \"- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")\",\n                                React.createElement(\"br\", null),\n                                \"- User (login=\\\"user\\\" and password=\\\"user\\\").\")))))));\n    }\n}\nconst mapStateToProps = ({ locale }) => ({\n    currentLocale: locale.currentLocale\n});\nconst mapDispatchToProps = { handleRegister, reset };\nexport default connect(mapStateToProps, mapDispatchToProps)(RegisterPage);\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/register/register.tsx","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/account/register/register.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { connect } from 'react-redux';\nimport { AvForm, AvField } from 'availity-reactstrap-validation';\nimport { Row, Col, Alert, Button } from 'reactstrap';\n\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { IRootState } from 'app/shared/reducers';\nimport { handleRegister, reset } from './register.reducer';\n\nexport interface IRegisterProps extends StateProps, DispatchProps {}\n\nexport interface IRegisterState {\n  password: string;\n}\n\nexport class RegisterPage extends React.Component<IRegisterProps, IRegisterState> {\n  state: IRegisterState = {\n    password: ''\n  };\n\n  componentWillUnmount() {\n    this.props.reset();\n  }\n\n  handleValidSubmit = (event, values) => {\n    this.props.handleRegister(values.username, values.email, values.firstPassword, this.props.currentLocale);\n    event.preventDefault();\n  };\n\n  updatePassword = event => {\n    this.setState({ password: event.target.value });\n  };\n\n  render() {\n    return (\n      <div>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <h1 id=\"register-title\">\n              <Translate contentKey=\"register.title\">Registration</Translate>\n            </h1>\n          </Col>\n        </Row>\n        <Row className=\"justify-content-center\">\n          <Col md=\"8\">\n            <AvForm id=\"register-form\" onValidSubmit={this.handleValidSubmit}>\n              <AvField\n                name=\"username\"\n                label={translate('global.form.username.label')}\n                placeholder={translate('global.form.username.placeholder')}\n                validate={{\n                  required: { value: true, errorMessage: translate('register.messages.validate.login.required') },\n                  pattern: { value: '^[_.@A-Za-z0-9-]*$', errorMessage: translate('register.messages.validate.login.pattern') },\n                  minLength: { value: 1, errorMessage: translate('register.messages.validate.login.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('register.messages.validate.login.maxlength') }\n                }}\n              />\n              <AvField\n                name=\"email\"\n                label={translate('global.form.email.label')}\n                placeholder={translate('global.form.email.placeholder')}\n                type=\"email\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.email.required') },\n                  minLength: { value: 5, errorMessage: translate('global.messages.validate.email.minlength') },\n                  maxLength: { value: 254, errorMessage: translate('global.messages.validate.email.maxlength') }\n                }}\n              />\n              <AvField\n                name=\"firstPassword\"\n                label={translate('global.form.newpassword.label')}\n                placeholder={translate('global.form.newpassword.placeholder')}\n                type=\"password\"\n                onChange={this.updatePassword}\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.newpassword.required') },\n                  minLength: { value: 4, errorMessage: translate('global.messages.validate.newpassword.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('global.messages.validate.newpassword.maxlength') }\n                }}\n              />\n              <PasswordStrengthBar password={this.state.password} />\n              <AvField\n                name=\"secondPassword\"\n                label={translate('global.form.confirmpassword.label')}\n                placeholder={translate('global.form.confirmpassword.placeholder')}\n                type=\"password\"\n                validate={{\n                  required: { value: true, errorMessage: translate('global.messages.validate.confirmpassword.required') },\n                  minLength: { value: 4, errorMessage: translate('global.messages.validate.confirmpassword.minlength') },\n                  maxLength: { value: 50, errorMessage: translate('global.messages.validate.confirmpassword.maxlength') },\n                  match: { value: 'firstPassword', errorMessage: translate('global.messages.error.dontmatch') }\n                }}\n              />\n              <Button id=\"register-submit\" color=\"primary\" type=\"submit\">\n                <Translate contentKey=\"register.form.button\">Register</Translate>\n              </Button>\n            </AvForm>\n            <p>&nbsp;</p>\n            <Alert color=\"warning\">\n              <span>\n                <Translate contentKey=\"global.messages.info.authenticated.prefix\">If you want to </Translate>\n              </span>\n              <a className=\"alert-link\">\n                <Translate contentKey=\"global.messages.info.authenticated.link\"> sign in</Translate>\n              </a>\n              <span>\n                <Translate contentKey=\"global.messages.info.authenticated.suffix\">\n                  , you can try the default accounts:\n                  <br />- Administrator (login=\"admin\" and password=\"admin\")\n                  <br />- User (login=\"user\" and password=\"user\").\n                </Translate>\n              </span>\n            </Alert>\n          </Col>\n        </Row>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ locale }: IRootState) => ({\n  currentLocale: locale.currentLocale\n});\n\nconst mapDispatchToProps = { handleRegister, reset };\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegisterPage);\n"]}]}