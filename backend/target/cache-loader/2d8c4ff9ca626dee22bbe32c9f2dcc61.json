{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-3!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/logs/logs.tsx","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/logs/logs.tsx","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/react-hot-loader/webpack.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\nexport class LogsPage extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            filter: ''\n        };\n        this.getLogs = () => {\n            if (!this.props.isFetching) {\n                this.props.getLoggers();\n            }\n        };\n        this.changeLevel = (loggerName, level) => () => {\n            this.props.changeLogLevel(loggerName, level);\n        };\n        this.setFilter = evt => {\n            this.setState({\n                filter: evt.target.value\n            });\n        };\n        this.getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\n        this.filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\n    }\n    componentDidMount() {\n        this.props.getLoggers();\n    }\n    render() {\n        const { logs, isFetching } = this.props;\n        const { filter } = this.state;\n        const loggers = logs ? Object.entries(logs.loggers).map(e => ({ name: e[0], level: e[1].effectiveLevel })) : [];\n        return (React.createElement(\"div\", null,\n            React.createElement(\"h2\", { id: \"logs-page-heading\" },\n                React.createElement(Translate, { contentKey: \"logs.title\" }, \"Logs\")),\n            React.createElement(\"p\", null,\n                React.createElement(Translate, { contentKey: \"logs.nbloggers\", interpolate: { total: loggers.length } },\n                    \"There are \",\n                    loggers.length.toString(),\n                    \" loggers.\")),\n            React.createElement(\"span\", null,\n                React.createElement(Translate, { contentKey: \"logs.filter\" }, \"Filter\")),\n            React.createElement(\"input\", { type: \"text\", value: filter, onChange: this.setFilter, className: \"form-control\", disabled: isFetching }),\n            React.createElement(\"table\", { className: \"table table-sm table-striped table-bordered\" },\n                React.createElement(\"thead\", null,\n                    React.createElement(\"tr\", { title: \"click to order\" },\n                        React.createElement(\"th\", null,\n                            React.createElement(\"span\", null,\n                                React.createElement(Translate, { contentKey: \"logs.table.name\" }, \"Name\"))),\n                        React.createElement(\"th\", null,\n                            React.createElement(\"span\", null,\n                                React.createElement(Translate, { contentKey: \"logs.table.level\" }, \"Level\"))))),\n                React.createElement(\"tbody\", null, loggers.filter(this.filterFn).map((logger, i) => (React.createElement(\"tr\", { key: `log-row-${i}` },\n                    React.createElement(\"td\", null,\n                        React.createElement(\"small\", null, logger.name)),\n                    React.createElement(\"td\", null,\n                        React.createElement(\"button\", { disabled: isFetching, onClick: this.changeLevel(logger.name, 'TRACE'), className: this.getClassName(logger.level, 'TRACE', 'primary') }, \"TRACE\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: this.changeLevel(logger.name, 'DEBUG'), className: this.getClassName(logger.level, 'DEBUG', 'success') }, \"DEBUG\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: this.changeLevel(logger.name, 'INFO'), className: this.getClassName(logger.level, 'INFO', 'info') }, \"INFO\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: this.changeLevel(logger.name, 'WARN'), className: this.getClassName(logger.level, 'WARN', 'warning') }, \"WARN\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: this.changeLevel(logger.name, 'ERROR'), className: this.getClassName(logger.level, 'ERROR', 'danger') }, \"ERROR\"),\n                        React.createElement(\"button\", { disabled: isFetching, onClick: this.changeLevel(logger.name, 'OFF'), className: this.getClassName(logger.level, 'OFF', 'secondary') }, \"OFF\")))))))));\n    }\n}\nconst mapStateToProps = ({ administration }) => ({\n    logs: administration.logs,\n    isFetching: administration.loading\n});\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\nexport default connect(mapStateToProps, mapDispatchToProps)(LogsPage);\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/logs/logs.tsx","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/administration/logs/logs.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Translate } from 'react-jhipster';\n\nimport { getLoggers, changeLogLevel } from '../administration.reducer';\nimport { IRootState } from 'app/shared/reducers';\n\nexport interface ILogsPageProps extends StateProps, DispatchProps {}\n\nexport interface ILogsPageState {\n  filter: string;\n}\n\nexport class LogsPage extends React.Component<ILogsPageProps, ILogsPageState> {\n  state: ILogsPageState = {\n    filter: ''\n  };\n\n  componentDidMount() {\n    this.props.getLoggers();\n  }\n\n  getLogs = () => {\n    if (!this.props.isFetching) {\n      this.props.getLoggers();\n    }\n  };\n\n  changeLevel = (loggerName, level) => () => {\n    this.props.changeLogLevel(loggerName, level);\n  };\n\n  setFilter = evt => {\n    this.setState({\n      filter: evt.target.value\n    });\n  };\n\n  getClassName = (level, check, className) => (level === check ? `btn btn-sm btn-${className}` : 'btn btn-sm btn-light');\n\n  filterFn = l => l.name.toUpperCase().includes(this.state.filter.toUpperCase());\n\n  render() {\n    const { logs, isFetching } = this.props;\n    const { filter } = this.state;\n    const loggers = logs ? Object.entries(logs.loggers).map(e => ({ name: e[0], level: e[1].effectiveLevel })) : [];\n    return (\n      <div>\n        <h2 id=\"logs-page-heading\">\n          <Translate contentKey=\"logs.title\">Logs</Translate>\n        </h2>\n        <p>\n          <Translate contentKey=\"logs.nbloggers\" interpolate={{ total: loggers.length }}>\n            There are {loggers.length.toString()} loggers.\n          </Translate>\n        </p>\n\n        <span>\n          <Translate contentKey=\"logs.filter\">Filter</Translate>\n        </span>\n        <input type=\"text\" value={filter} onChange={this.setFilter} className=\"form-control\" disabled={isFetching} />\n\n        <table className=\"table table-sm table-striped table-bordered\">\n          <thead>\n            <tr title=\"click to order\">\n              <th>\n                <span>\n                  <Translate contentKey=\"logs.table.name\">Name</Translate>\n                </span>\n              </th>\n              <th>\n                <span>\n                  <Translate contentKey=\"logs.table.level\">Level</Translate>\n                </span>\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {loggers.filter(this.filterFn).map((logger, i) => (\n              <tr key={`log-row-${i}`}>\n                <td>\n                  <small>{logger.name}</small>\n                </td>\n                <td>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'TRACE')}\n                    className={this.getClassName(logger.level, 'TRACE', 'primary')}\n                  >\n                    TRACE\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'DEBUG')}\n                    className={this.getClassName(logger.level, 'DEBUG', 'success')}\n                  >\n                    DEBUG\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'INFO')}\n                    className={this.getClassName(logger.level, 'INFO', 'info')}\n                  >\n                    INFO\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'WARN')}\n                    className={this.getClassName(logger.level, 'WARN', 'warning')}\n                  >\n                    WARN\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'ERROR')}\n                    className={this.getClassName(logger.level, 'ERROR', 'danger')}\n                  >\n                    ERROR\n                  </button>\n                  <button\n                    disabled={isFetching}\n                    onClick={this.changeLevel(logger.name, 'OFF')}\n                    className={this.getClassName(logger.level, 'OFF', 'secondary')}\n                  >\n                    OFF\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ administration }: IRootState) => ({\n  logs: administration.logs,\n  isFetching: administration.loading\n});\n\nconst mapDispatchToProps = { getLoggers, changeLogLevel };\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\ntype DispatchProps = typeof mapDispatchToProps;\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LogsPage);\n"]}]}