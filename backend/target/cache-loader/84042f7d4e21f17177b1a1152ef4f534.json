{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/reducers/locale.ts","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/reducers/locale.ts","mtime":1560712705219},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport axios from 'axios';\nimport { TranslatorContext } from 'react-jhipster';\nexport const ACTION_TYPES = {\n    SET_LOCALE: 'locale/SET_LOCALE'\n};\nconst initialState = {\n    currentLocale: undefined\n};\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case ACTION_TYPES.SET_LOCALE:\n            const currentLocale = action.locale;\n            if (state.currentLocale !== currentLocale) {\n                TranslatorContext.setLocale(currentLocale);\n            }\n            return {\n                currentLocale\n            };\n        default:\n            return state;\n    }\n};\nexport const setLocale = locale => (dispatch) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n    if (!Object.keys(TranslatorContext.context.translations).includes(locale)) {\n        const response = yield axios.get(`i18n/${locale}.json?buildTimestamp=${process.env.BUILD_TIMESTAMP}`, { baseURL: '' });\n        TranslatorContext.registerTranslations(locale, response.data);\n    }\n    dispatch({\n        type: ACTION_TYPES.SET_LOCALE,\n        locale\n    });\n});\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/reducers/locale.ts","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/reducers/locale.ts"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAE1B,OAAO,EAAE,iBAAiB,EAAW,MAAM,gBAAgB,CAAC;AAE5D,MAAM,CAAC,MAAM,YAAY,GAAG;IAC1B,UAAU,EAAE,mBAAmB;CAChC,CAAC;AAEF,MAAM,YAAY,GAAG;IACnB,aAAa,EAAE,SAAS;CACzB,CAAC;AAIF,eAAe,CAAC,QAAqB,YAAY,EAAE,MAAM,EAAe,EAAE;IACxE,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,YAAY,CAAC,UAAU;YAC1B,MAAM,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC;YACpC,IAAI,KAAK,CAAC,aAAa,KAAK,aAAa,EAAE;gBACzC,iBAAiB,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC;aAC5C;YACD,OAAO;gBACL,aAAa;aACd,CAAC;QACJ;YACE,OAAO,KAAK,CAAC;KAChB;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,MAAM,CAAC,EAAE,CAAC,CAAM,QAAQ,EAAC,EAAE;IAClD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;QACzE,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,QAAQ,MAAM,wBAAwB,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,EAAE,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;QACvH,iBAAiB,CAAC,oBAAoB,CAAC,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC;KAC/D;IACD,QAAQ,CAAC;QACP,IAAI,EAAE,YAAY,CAAC,UAAU;QAC7B,MAAM;KACP,CAAC,CAAC;AACL,CAAC,CAAA,CAAC","sourcesContent":["import axios from 'axios';\n\nimport { TranslatorContext, Storage } from 'react-jhipster';\n\nexport const ACTION_TYPES = {\n  SET_LOCALE: 'locale/SET_LOCALE'\n};\n\nconst initialState = {\n  currentLocale: undefined\n};\n\nexport type LocaleState = Readonly<typeof initialState>;\n\nexport default (state: LocaleState = initialState, action): LocaleState => {\n  switch (action.type) {\n    case ACTION_TYPES.SET_LOCALE:\n      const currentLocale = action.locale;\n      if (state.currentLocale !== currentLocale) {\n        TranslatorContext.setLocale(currentLocale);\n      }\n      return {\n        currentLocale\n      };\n    default:\n      return state;\n  }\n};\n\nexport const setLocale = locale => async dispatch => {\n  if (!Object.keys(TranslatorContext.context.translations).includes(locale)) {\n    const response = await axios.get(`i18n/${locale}.json?buildTimestamp=${process.env.BUILD_TIMESTAMP}`, { baseURL: '' });\n    TranslatorContext.registerTranslations(locale, response.data);\n  }\n  dispatch({\n    type: ACTION_TYPES.SET_LOCALE,\n    locale\n  });\n};\n"]}]}