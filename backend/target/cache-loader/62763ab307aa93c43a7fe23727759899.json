{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/login/login-modal.tsx","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/login/login-modal.tsx","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, Alert, Row, Col } from 'reactstrap';\nimport { AvForm, AvField, AvGroup, AvInput } from 'availity-reactstrap-validation';\nimport { Link } from 'react-router-dom';\nclass LoginModal extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.handleSubmit = (event, errors, { username, password, rememberMe }) => {\n            const { handleLogin } = this.props;\n            handleLogin(username, password, rememberMe);\n        };\n    }\n    render() {\n        const { loginError, handleClose } = this.props;\n        return (React.createElement(Modal, { isOpen: this.props.showModal, toggle: handleClose, backdrop: \"static\", id: \"login-page\", autoFocus: false },\n            React.createElement(AvForm, { onSubmit: this.handleSubmit },\n                React.createElement(ModalHeader, { id: \"login-title\", toggle: handleClose },\n                    React.createElement(Translate, { contentKey: \"login.title\" }, \"Sign in\")),\n                React.createElement(ModalBody, null,\n                    React.createElement(Row, null,\n                        React.createElement(Col, { md: \"12\" }, loginError ? (React.createElement(Alert, { color: \"danger\" },\n                            React.createElement(Translate, { contentKey: \"login.messages.error.authentication\" },\n                                React.createElement(\"strong\", null, \"Failed to sign in!\"),\n                                \" Please check your credentials and try again.\"))) : null),\n                        React.createElement(Col, { md: \"12\" },\n                            React.createElement(AvField, { name: \"username\", label: translate('global.form.username.label'), placeholder: translate('global.form.username.placeholder'), required: true, errorMessage: \"Username cannot be empty!\", autoFocus: true }),\n                            React.createElement(AvField, { name: \"password\", type: \"password\", label: translate('login.form.password'), placeholder: translate('login.form.password.placeholder'), required: true, errorMessage: \"Password cannot be empty!\" }),\n                            React.createElement(AvGroup, { check: true, inline: true },\n                                React.createElement(Label, { className: \"form-check-label\" },\n                                    React.createElement(AvInput, { type: \"checkbox\", name: \"rememberMe\" }),\n                                    \" \",\n                                    React.createElement(Translate, { contentKey: \"login.form.rememberme\" }, \"Remember me\"))))),\n                    React.createElement(\"div\", { className: \"mt-1\" }, \"\\u00A0\"),\n                    React.createElement(Alert, { color: \"warning\" },\n                        React.createElement(Link, { to: \"/reset/request\" },\n                            React.createElement(Translate, { contentKey: \"login.password.forgot\" }, \"Did you forget your password?\"))),\n                    React.createElement(Alert, { color: \"warning\" },\n                        React.createElement(\"span\", null,\n                            React.createElement(Translate, { contentKey: \"global.messages.info.register.noaccount\" }, \"You don't have an account yet?\")),\n                        ' ',\n                        React.createElement(Link, { to: \"/register\" },\n                            React.createElement(Translate, { contentKey: \"global.messages.info.register.link\" }, \"Register a new account\")))),\n                React.createElement(ModalFooter, null,\n                    React.createElement(Button, { color: \"secondary\", onClick: handleClose, tabIndex: \"1\" },\n                        React.createElement(Translate, { contentKey: \"entity.action.cancel\" }, \"Cancel\")),\n                    ' ',\n                    React.createElement(Button, { color: \"primary\", type: \"submit\" },\n                        React.createElement(Translate, { contentKey: \"login.form.button\" }, \"Sign in\"))))));\n    }\n}\nexport default LoginModal;\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/login/login-modal.tsx","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/modules/login/login-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Translate, translate } from 'react-jhipster';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, Label, Alert, Row, Col } from 'reactstrap';\nimport { AvForm, AvField, AvGroup, AvInput } from 'availity-reactstrap-validation';\nimport { Link } from 'react-router-dom';\n\nexport interface ILoginModalProps {\n  showModal: boolean;\n  loginError: boolean;\n  handleLogin: Function;\n  handleClose: Function;\n}\n\nclass LoginModal extends React.Component<ILoginModalProps> {\n  handleSubmit = (event, errors, { username, password, rememberMe }) => {\n    const { handleLogin } = this.props;\n    handleLogin(username, password, rememberMe);\n  };\n\n  render() {\n    const { loginError, handleClose } = this.props;\n\n    return (\n      <Modal isOpen={this.props.showModal} toggle={handleClose} backdrop=\"static\" id=\"login-page\" autoFocus={false}>\n        <AvForm onSubmit={this.handleSubmit}>\n          <ModalHeader id=\"login-title\" toggle={handleClose}>\n            <Translate contentKey=\"login.title\">Sign in</Translate>\n          </ModalHeader>\n          <ModalBody>\n            <Row>\n              <Col md=\"12\">\n                {loginError ? (\n                  <Alert color=\"danger\">\n                    <Translate contentKey=\"login.messages.error.authentication\">\n                      <strong>Failed to sign in!</strong> Please check your credentials and try again.\n                    </Translate>\n                  </Alert>\n                ) : null}\n              </Col>\n              <Col md=\"12\">\n                <AvField\n                  name=\"username\"\n                  label={translate('global.form.username.label')}\n                  placeholder={translate('global.form.username.placeholder')}\n                  required\n                  errorMessage=\"Username cannot be empty!\"\n                  autoFocus\n                />\n                <AvField\n                  name=\"password\"\n                  type=\"password\"\n                  label={translate('login.form.password')}\n                  placeholder={translate('login.form.password.placeholder')}\n                  required\n                  errorMessage=\"Password cannot be empty!\"\n                />\n                <AvGroup check inline>\n                  <Label className=\"form-check-label\">\n                    <AvInput type=\"checkbox\" name=\"rememberMe\" /> <Translate contentKey=\"login.form.rememberme\">Remember me</Translate>\n                  </Label>\n                </AvGroup>\n              </Col>\n            </Row>\n            <div className=\"mt-1\">&nbsp;</div>\n            <Alert color=\"warning\">\n              <Link to=\"/reset/request\">\n                <Translate contentKey=\"login.password.forgot\">Did you forget your password?</Translate>\n              </Link>\n            </Alert>\n            <Alert color=\"warning\">\n              <span>\n                <Translate contentKey=\"global.messages.info.register.noaccount\">You don't have an account yet?</Translate>\n              </span>{' '}\n              <Link to=\"/register\">\n                <Translate contentKey=\"global.messages.info.register.link\">Register a new account</Translate>\n              </Link>\n            </Alert>\n          </ModalBody>\n          <ModalFooter>\n            <Button color=\"secondary\" onClick={handleClose} tabIndex=\"1\">\n              <Translate contentKey=\"entity.action.cancel\">Cancel</Translate>\n            </Button>{' '}\n            <Button color=\"primary\" type=\"submit\">\n              <Translate contentKey=\"login.form.button\">Sign in</Translate>\n            </Button>\n          </ModalFooter>\n        </AvForm>\n      </Modal>\n    );\n  }\n}\n\nexport default LoginModal;\n"]}]}