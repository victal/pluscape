{"remainingRequest":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js??ref--4-1!/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js??ref--4-2!/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/auth/private-route.tsx","dependencies":[{"path":"/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/auth/private-route.tsx","mtime":1560712705215},{"path":"/home/guilherme/workspace/jhipster/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/guilherme/workspace/jhipster/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["import * as tslib_1 from \"tslib\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect } from 'react-router-dom';\nimport { Translate } from 'react-jhipster';\nimport ErrorBoundary from 'app/shared/error/error-boundary';\nexport const PrivateRouteComponent = (_a) => {\n    var { component: Component, isAuthenticated, sessionHasBeenFetched, isAuthorized, hasAnyAuthorities = [] } = _a, rest = tslib_1.__rest(_a, [\"component\", \"isAuthenticated\", \"sessionHasBeenFetched\", \"isAuthorized\", \"hasAnyAuthorities\"]);\n    const checkAuthorities = props => isAuthorized ? (React.createElement(ErrorBoundary, null,\n        React.createElement(Component, Object.assign({}, props)))) : (React.createElement(\"div\", { className: \"insufficient-authority\" },\n        React.createElement(\"div\", { className: \"alert alert-danger\" },\n            React.createElement(Translate, { contentKey: \"error.http.403\" }, \"You are not authorized to access this page.\"))));\n    const renderRedirect = props => {\n        if (!sessionHasBeenFetched) {\n            return React.createElement(\"div\", null);\n        }\n        else {\n            return isAuthenticated ? (checkAuthorities(props)) : (React.createElement(Redirect, { to: {\n                    pathname: '/login',\n                    search: props.location.search,\n                    state: { from: props.location }\n                } }));\n        }\n    };\n    if (!Component)\n        throw new Error(`A component needs to be specified for private route for path ${rest.path}`);\n    return React.createElement(Route, Object.assign({}, rest, { render: renderRedirect }));\n};\nexport const hasAnyAuthority = (authorities, hasAnyAuthorities) => {\n    if (authorities && authorities.length !== 0) {\n        if (hasAnyAuthorities.length === 0) {\n            return true;\n        }\n        return hasAnyAuthorities.some(auth => authorities.includes(auth));\n    }\n    return false;\n};\nconst mapStateToProps = ({ authentication: { isAuthenticated, account, sessionHasBeenFetched } }, { hasAnyAuthorities = [] }) => ({\n    isAuthenticated,\n    isAuthorized: hasAnyAuthority(account.authorities, hasAnyAuthorities),\n    sessionHasBeenFetched\n});\n/**\n * A route wrapped in an authentication check so that routing happens only when you are authenticated.\n * Accepts same props as React router Route.\n * The route also checks for authorization if hasAnyAuthorities is specified.\n */\nexport const PrivateRoute = connect(mapStateToProps, null, null, { pure: false })(PrivateRouteComponent);\nexport default PrivateRoute;\n",{"version":3,"file":"/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/auth/private-route.tsx","sourceRoot":"","sources":["/home/guilherme/workspace/jhipster/node_modules/tslint-loader/index.js!/home/guilherme/workspace/jhipster/src/main/webapp/app/shared/auth/private-route.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAC;AAC1B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAc,MAAM,kBAAkB,CAAC;AAC/D,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAE3C,OAAO,aAAa,MAAM,iCAAiC,CAAC;AAQ5D,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,EAOjB,EAAE,EAAE;QAPa,EACpC,SAAS,EAAE,SAAS,EACpB,eAAe,EACf,qBAAqB,EACrB,YAAY,EACZ,iBAAiB,GAAG,EAAE,OAEH,EADnB,yHAAO;IAEP,MAAM,gBAAgB,GAAG,KAAK,CAAC,EAAE,CAC/B,YAAY,CAAC,CAAC,CAAC,CACb,oBAAC,aAAa;QACZ,oBAAC,SAAS,oBAAK,KAAK,EAAI,CACV,CACjB,CAAC,CAAC,CAAC,CACF,6BAAK,SAAS,EAAC,wBAAwB;QACrC,6BAAK,SAAS,EAAC,oBAAoB;YACjC,oBAAC,SAAS,IAAC,UAAU,EAAC,gBAAgB,kDAAwD,CAC1F,CACF,CACP,CAAC;IAEJ,MAAM,cAAc,GAAG,KAAK,CAAC,EAAE;QAC7B,IAAI,CAAC,qBAAqB,EAAE;YAC1B,OAAO,gCAAO,CAAC;SAChB;aAAM;YACL,OAAO,eAAe,CAAC,CAAC,CAAC,CACvB,gBAAgB,CAAC,KAAK,CAAC,CACxB,CAAC,CAAC,CAAC,CACF,oBAAC,QAAQ,IACP,EAAE,EAAE;oBACF,QAAQ,EAAE,QAAQ;oBAClB,MAAM,EAAE,KAAK,CAAC,QAAQ,CAAC,MAAM;oBAC7B,KAAK,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,QAAQ,EAAE;iBAChC,GACD,CACH,CAAC;SACH;IACH,CAAC,CAAC;IAEF,IAAI,CAAC,SAAS;QAAE,MAAM,IAAI,KAAK,CAAC,gEAAiE,IAAY,CAAC,IAAI,EAAE,CAAC,CAAC;IAEtH,OAAO,oBAAC,KAAK,oBAAK,IAAI,IAAE,MAAM,EAAE,cAAc,IAAI,CAAC;AACrD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,WAAqB,EAAE,iBAA2B,EAAE,EAAE;IACpF,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3C,IAAI,iBAAiB,CAAC,MAAM,KAAK,CAAC,EAAE;YAClC,OAAO,IAAI,CAAC;SACb;QACD,OAAO,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;KACnE;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CACtB,EAAE,cAAc,EAAE,EAAE,eAAe,EAAE,OAAO,EAAE,qBAAqB,EAAE,EAAc,EACnF,EAAE,iBAAiB,GAAG,EAAE,EAAa,EACrC,EAAE,CAAC,CAAC;IACJ,eAAe;IACf,YAAY,EAAE,eAAe,CAAC,OAAO,CAAC,WAAW,EAAE,iBAAiB,CAAC;IACrE,qBAAqB;CACtB,CAAC,CAAC;AAIH;;;;GAIG;AACH,MAAM,CAAC,MAAM,YAAY,GAAG,OAAO,CACjC,eAAe,EACf,IAAI,EACJ,IAAI,EACJ,EAAE,IAAI,EAAE,KAAK,EAAE,CAChB,CAAC,qBAAqB,CAAC,CAAC;AAEzB,eAAe,YAAY,CAAC","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Route, Redirect, RouteProps } from 'react-router-dom';\nimport { Translate } from 'react-jhipster';\nimport { IRootState } from 'app/shared/reducers';\nimport ErrorBoundary from 'app/shared/error/error-boundary';\n\ninterface IOwnProps extends RouteProps {\n  hasAnyAuthorities?: string[];\n}\n\nexport interface IPrivateRouteProps extends IOwnProps, StateProps {}\n\nexport const PrivateRouteComponent = ({\n  component: Component,\n  isAuthenticated,\n  sessionHasBeenFetched,\n  isAuthorized,\n  hasAnyAuthorities = [],\n  ...rest\n}: IPrivateRouteProps) => {\n  const checkAuthorities = props =>\n    isAuthorized ? (\n      <ErrorBoundary>\n        <Component {...props} />\n      </ErrorBoundary>\n    ) : (\n      <div className=\"insufficient-authority\">\n        <div className=\"alert alert-danger\">\n          <Translate contentKey=\"error.http.403\">You are not authorized to access this page.</Translate>\n        </div>\n      </div>\n    );\n\n  const renderRedirect = props => {\n    if (!sessionHasBeenFetched) {\n      return <div />;\n    } else {\n      return isAuthenticated ? (\n        checkAuthorities(props)\n      ) : (\n        <Redirect\n          to={{\n            pathname: '/login',\n            search: props.location.search,\n            state: { from: props.location }\n          }}\n        />\n      );\n    }\n  };\n\n  if (!Component) throw new Error(`A component needs to be specified for private route for path ${(rest as any).path}`);\n\n  return <Route {...rest} render={renderRedirect} />;\n};\n\nexport const hasAnyAuthority = (authorities: string[], hasAnyAuthorities: string[]) => {\n  if (authorities && authorities.length !== 0) {\n    if (hasAnyAuthorities.length === 0) {\n      return true;\n    }\n    return hasAnyAuthorities.some(auth => authorities.includes(auth));\n  }\n  return false;\n};\n\nconst mapStateToProps = (\n  { authentication: { isAuthenticated, account, sessionHasBeenFetched } }: IRootState,\n  { hasAnyAuthorities = [] }: IOwnProps\n) => ({\n  isAuthenticated,\n  isAuthorized: hasAnyAuthority(account.authorities, hasAnyAuthorities),\n  sessionHasBeenFetched\n});\n\ntype StateProps = ReturnType<typeof mapStateToProps>;\n\n/**\n * A route wrapped in an authentication check so that routing happens only when you are authenticated.\n * Accepts same props as React router Route.\n * The route also checks for authorization if hasAnyAuthorities is specified.\n */\nexport const PrivateRoute = connect<StateProps, undefined, IOwnProps>(\n  mapStateToProps,\n  null,\n  null,\n  { pure: false }\n)(PrivateRouteComponent);\n\nexport default PrivateRoute;\n"]}]}